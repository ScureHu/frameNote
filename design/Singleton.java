/**
 * 单例设计模式
 * 饿汉式
 * 在类装载的时候就创建，不管我们用没用，先创建再说，如果我们一直都没有用，变浪费了空间
 * 总结：
 * 「饿汉式」是最简单的实现方式，这种实现方式适合那些在初始化时就要用到单例的情况，这种方式简单粗暴，
 *  如果单例对象初始化非常快，而且占用内存非常小的时候这种方式是比较合适的，可以直接在应用启动时加载并初始化。
 *  但是，如果单例初始化的操作耗时比较长而应用对于启动速度又有要求，或者单例的占用内存比较大，
 *  再或者单例只是在某个特定场景的情况下才会被使用，而一般情况下是不会使用时，使用「饿汉式」的单例模式就是不合适的，
 *  这时候就需要用到「懒汉式」的方式去按需延迟加载单例。
 *  runtime类就用到该设计模式
 */
public class Singleton {

    private static Singleton instance = new Singleton();

    private Singleton(){};

    public static Singleton getInstance(){
        return instance;
    }
}
